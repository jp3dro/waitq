-- Enable UUID extension
create extension if not exists "uuid-ossp";

-- Businesses (tenants)
create table if not exists public.businesses (
  id uuid primary key default uuid_generate_v4(),
  owner_user_id uuid not null,
  name text not null,
  phone text,
  created_at timestamptz not null default now()
);

-- Waitlist entries per business
create table if not exists public.waitlist_entries (
  id uuid primary key default uuid_generate_v4(),
  business_id uuid not null references public.businesses(id) on delete cascade,
  customer_name text,
  phone text not null,
  status text not null default 'waiting', -- waiting | notified | seated | cancelled
  position int generated by default as identity,
  eta_minutes int,
  token text unique not null, -- public status token
  created_at timestamptz not null default now(),
  notified_at timestamptz
);

-- Basic RLS policies
alter table public.businesses enable row level security;
alter table public.waitlist_entries enable row level security;

-- Only owner can access its business
create policy "owner can read own business" on public.businesses
  for select using (auth.uid() = owner_user_id);
create policy "owner can modify own business" on public.businesses
  for all using (auth.uid() = owner_user_id);

-- Business owner can CRUD their entries
create policy "owner read entries" on public.waitlist_entries
  for select using (
    exists(select 1 from public.businesses b where b.id = business_id and b.owner_user_id = auth.uid())
  );
create policy "owner write entries" on public.waitlist_entries
  for all using (
    exists(select 1 from public.businesses b where b.id = business_id and b.owner_user_id = auth.uid())
  );

-- Public can read a single entry by token (status page)
create policy "public read by token" on public.waitlist_entries
  for select using (
    (select current_setting('request.jwt.claims', true)) is null -- anon
    and token is not null
  );


